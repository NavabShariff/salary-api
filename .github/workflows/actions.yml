name: Salary API CI pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:

env:
  AWS_DEFAULT_REGION: 'ap-south-1'
  ECR_REPO: 'salary-api'

permissions:
    id-token: write
    contents: read  

jobs:

  clone:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          path: source-code

      - name: Upload source code
        uses: actions/upload-artifact@v4
        with:
          name: source-code
          path: source-code



  # sonar-scan:
  #   runs-on: ubuntu-latest
  #   needs: clone
  #   container:
  #     image: maven:3.9-eclipse-temurin-17
  #   steps:
  #     - name: Download source code
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: source-code
  #         path: source-code

  #     - name: Run Maven Compile
  #       run: |
  #         cd source-code
  #         mvn clean compile -DskipTests

  #     - name: Run Maven Sonar Scan
  #       run: |
  #         cd source-code
  #         mvn sonar:sonar \
  #           -DskipTests \
  #           -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
  #           -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
  #           -Dsonar.projectName=${{ github.event.repository.name }} \
  #           -Dsonar.projectKey=${{ github.event.repository.name }} \
  #           -Dsonar.coverage.jacoco.xmlReportPaths=jacoco.xml \
  #           -Dsonar.qualitygate.wait=true

  docker-build-push:
    runs-on: ubuntu-latest

    outputs:
      image-tag: ${{ steps.vars.outputs.image_tag }}
      image-name: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}

    needs: clone 
    steps:
      - name: Download source code
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: source-code

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ATHENTICATION }}
          role-session-name: GitHubActionSession
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # - name: Set Image Tags
      #   id: vars
      #   run: |
      #     echo "IMAGE_TAG=$(echo $GITHUB_SHA | head -c 8)" >> $GITHUB_ENV

      - name: Set Image Tags
        id: vars
        run: |
          IMAGE_TAG=$(echo $GITHUB_SHA | head -c 8)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "::set-output name=image_tag::$IMAGE_TAG"


      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: source-code
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}

  ecr-scan-verify:
    runs-on: ubuntu-latest
    needs: docker-build-push
    steps:

      - name: Download source code
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ATHENTICATION }}
          role-session-name: GitHubActionSession
          aws-region: ${{ env.AWS_DEFAULT_REGION }}


      - name: Set Image Tags
        id: vars
        run: |
          echo "IMAGE_TAG=$(echo $GITHUB_SHA | head -c 8)" >> $GITHUB_ENV

      - name: Install JQ
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Run ECR Vulnerability Scan Check
        run: |
          chmod +x ./check-ecr-scan.sh && ./check-ecr-scan.sh ${{ env.ECR_REPO }} ${{ env.IMAGE_TAG }} ${{ env.AWS_DEFAULT_REGION }}

deploy:
  runs-on: ubuntu-latest
  needs: ecr-scan-verify
  steps:

    - name: Checkout another repository
      uses: actions/checkout@v4
      with:
        repository: NavabShariff/gitops-source 
        token: ${{ secrets.GITHUB_TOKEN }}

    # - name: Set Image Tags
    #   id: vars
    #   run: |
    #     echo "IMAGE_TAG=$(echo $GITHUB_SHA | head -c 8)" >> $GITHUB_ENV

    - name: Update Image Tag in deployment.yaml
      run: |
        sed -i "s|\(${{ needs.docker-build-push.outputs.image-name }}:\)[^ ]*|\1${{ needs.docker-build-push.outputs.image-tag }}|" ${{github.repository_name }}/deployment.yaml

    - name: Commit updated deployment.yaml
      run: |
        git add .
        git commit -m "Update image tag to ${IMAGE_TAG}"
        git push

